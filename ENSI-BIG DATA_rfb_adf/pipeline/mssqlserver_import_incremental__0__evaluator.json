{
	"name": "mssqlserver_import_incremental__0__evaluator",
	"properties": {
		"description": "Well, this one uses a Filter condition for making things work for incremental loads.\n\nWARNING: \"tables\" object must be type ARRAY.\nAll objects in this array must be, in reality STRING type, enclosed by \".\nInside this objects, you should enclose everything in SINGLE QUOTES.\nOtherwise, things are not going to work. I warned you!\n\nHere's an example:\n[\"{'schema': 'INDDESEMPENHO', 'table':'ESTABELECIMENTO','load_type':'incremental','partition_column':'DATAATUALIZACAO','partitions':5,'control_column':'DATAATUALIZACAO','control_column_type_2_db':'datetime', 'control_column_default_value': '19000101',\n'control_column_mask_value': 'DD/MM/YYYY HH24:MI:SS'}\"]\n\n",
		"activities": [
			{
				"name": "create_watermark_row_for_table_if_not_exists",
				"description": "Calls the procedure that creates a new entry in the watermark control table in SQLDW case the table is not already created in it. \nDon't worry, there's a clause in the procedure that guarantees that only non-existing tables will be created. There's no possibility of overwrite. So keep this component as it is. It looks strange but works!\n\nThe first value of the control column in the watermark table is set in the properties of each table by the variable 'control_column_default_value'",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": {
						"value": "@pipeline().parameters.watermark.procedures.insert_first_watermark",
						"type": "Expression"
					},
					"storedProcedureParameters": {
						"ControlColumn": {
							"value": {
								"value": "@toLower(json(pipeline().parameters.tables[0]).control_column)",
								"type": "Expression"
							},
							"type": "String"
						},
						"ControlColumnType2Db": {
							"value": {
								"value": "@toLower(json(pipeline().parameters.tables[0]).control_column_type_2_db)",
								"type": "Expression"
							},
							"type": "String"
						},
						"ControlColumnValue": {
							"value": {
								"value": "@toLower(json(pipeline().parameters.tables[0]).control_column_default_value)",
								"type": "Expression"
							},
							"type": "String"
						},
						"TableDatabaseVendor": {
							"value": {
								"value": "@toLower(pipeline().parameters.db.vendor)",
								"type": "Expression"
							},
							"type": "String"
						},
						"TableName": {
							"value": {
								"value": "@{pipeline().globalParameters.watermark_prefix_dbo}.@{toLower(json(pipeline().parameters.tables[0]).schema)}.@{toLower(json(pipeline().parameters.tables[0]).table)}",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "cnibigdatasqldw",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "mssqlserver_import_incremental__1_loader",
				"description": "Calls the next step, which implements incremental load from MSSQLServer DBs over valid control_column range",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "switch_control_control_2_db",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "mssqlserver_import_incremental__1__loader",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"db": {
							"value": "@pipeline().parameters.db",
							"type": "Expression"
						},
						"tables": {
							"value": "@pipeline().parameters.tables",
							"type": "Expression"
						},
						"dls": {
							"value": "@pipeline().parameters.dls",
							"type": "Expression"
						},
						"watermark": {
							"value": "@pipeline().parameters.watermark",
							"type": "Expression"
						},
						"databricks": {
							"value": "@pipeline().parameters.databricks",
							"type": "Expression"
						},
						"adf": {
							"value": "@pipeline().parameters.adf",
							"type": "Expression"
						},
						"increment": {
							"value": "@json(concat('{\"control_column\": {\"lowerbound\":' , variables('min_control_column'), ', \"upperbound\":', variables('max_control_column'), '}}'))",
							"type": "Expression"
						},
						"container": {
							"value": "@pipeline().parameters.container",
							"type": "Expression"
						},
						"url": {
							"value": "@pipeline().parameters.url",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "switch_control_control_2_db",
				"description": "Switches the control_column type for the adequate type for the control column in incremental loads.\n\nThe default type will be int/bigint!",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "create_watermark_row_for_table_if_not_exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@json(pipeline().parameters.tables[0]).control_column_type_2_db",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "datetime",
							"activities": [
								{
									"name": "get_max_control_column_datetime",
									"description": "Queries MSSQLSERVER for systimestamp and casts as the needed string format so we can use as upperbound value for incrmental loads.\n\n",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "SELECT CAST(FORMAT(SYSDATETIME(), 'yyyyMMddhhmmss') AS BIGINT) AS UPPERBOUND",
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "azuresql_parameterized",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "get_watermark_row_datetime",
									"description": "This lookup goes in the watermark table and fetches the entire row. \nWith this activity, we're setting the lower bound for the incremental load process. Now we need to check for datetime typed columns, so we'll be able to avoid values for a non-existing future.\n\nAfter fetching this row, we'll check for it's consistency and values. ",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "SELECT  * FROM @{toLower(pipeline().parameters.watermark.table)} WHERE @{toLower(pipeline().parameters.watermark.columns.table_name)}  = '@{toLower(concat(pipeline().globalParameters.watermark_prefix_dbo, '.', json(pipeline().parameters.tables[0]).schema, '.', json(pipeline().parameters.tables[0]).table))}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "sqldw_parameterized_watermark_table",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "type_datetime",
									"description": "Simple wait to provide the ideia of flux.",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "set_max_control_column_datetime",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "set_min_control_column_datetime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								},
								{
									"name": "set_max_control_column_datetime",
									"description": "Sets the variable value so it can be used in an unified way",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "get_max_control_column_datetime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "max_control_column",
										"value": {
											"value": "@string(activity('get_max_control_column_datetime').output.firstRow.UPPERBOUND)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set_min_control_column_datetime",
									"description": "Sets the variable value so it can be used in an unified way",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "get_watermark_row_datetime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "min_control_column",
										"value": {
											"value": "@string(activity('get_watermark_row_datetime').output.firstRow.control_column_value)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "string",
							"activities": [
								{
									"name": "string__not_implemented_yet",
									"description": "Fails cause it's not implemented yet,",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "error_implementation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "get_max_control_column_int",
							"description": "Queries the database to get the max(control_column) considering it's int type.",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT \nCAST(\n COALESCE(MAX(@{json(pipeline().parameters.tables[0]).control_column}), @{json(pipeline().parameters.tables[0]).control_column_default_value}) \nAS BIGINT) AS UPPERBOUND\nFROM @{json(pipeline().parameters.tables[0]).schema}.@{json(pipeline().parameters.tables[0]).table}\n\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"isolationLevel": "ReadCommitted",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "azuresql_parameterized",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "get_watermark_row_int",
							"description": "This lookup goes in the watermark table and fetches the entire row. \nWith this activity, we're setting the lower bound for the incremental load process. Now we need to check for datetime typed columns, so we'll be able to avoid values for a non-existing future.\n\nAfter fetching this row, we'll check for it's consistency and values. ",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderQuery": {
										"value": "SELECT  * FROM @{toLower(pipeline().parameters.watermark.table)} WHERE @{toLower(pipeline().parameters.watermark.columns.table_name)}  = '@{toLower(concat(pipeline().globalParameters.watermark_prefix_dbo, '.', json(pipeline().parameters.tables[0]).schema, '.', json(pipeline().parameters.tables[0]).table))}'",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sqldw_parameterized_watermark_table",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "type_int_bigint",
							"description": "Simple wait to provide the ideia of flux.",
							"type": "Wait",
							"dependsOn": [
								{
									"activity": "set_max_control_column_int",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "set_min_control_column_int",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 1
							}
						},
						{
							"name": "set_max_control_column_int",
							"description": "Sets the variable value so it can be used in an unified way",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "get_max_control_column_int",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "max_control_column",
								"value": {
									"value": "@string(activity('get_max_control_column_int').output.firstRow.UPPERBOUND)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set_min_control_column_int",
							"description": "Sets the variable value so it can be used in an unified way",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "get_watermark_row_int",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "min_control_column",
								"value": {
									"value": "@activity('get_watermark_row_int').output.firstRow.control_column_value",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"db": {
				"type": "object"
			},
			"tables": {
				"type": "array"
			},
			"dls": {
				"type": "object"
			},
			"watermark": {
				"type": "object"
			},
			"databricks": {
				"type": "object"
			},
			"adf": {
				"type": "object"
			},
			"container": {
				"type": "string"
			},
			"url": {
				"type": "string"
			}
		},
		"variables": {
			"max_control_column": {
				"type": "String"
			},
			"min_control_column": {
				"type": "String"
			}
		},
		"folder": {
			"name": "templates/raw/bdo/mssqlserver"
		},
		"annotations": [
			"raw",
			"template",
			"mssqlserver"
		]
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}